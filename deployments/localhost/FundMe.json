{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebdd6f4b2385ef83be8b3331c29952fe887be752a4aa253c37e279b426e5fdb3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1072674",
    "logsBloom": "0x
    "blockHash": "0x81f209feb15bd992107ad811794a76ac8dcaa3871a49ab8bffd21abc5f565624",
    "transactionHash": "0xebdd6f4b2385ef83be8b3331c29952fe887be752a4aa253c37e279b426e5fdb3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1072674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "4b840788964bec35ec752e0a72582e87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mateus Akira\",\"details\":\"This implements priceFeeds as libraries\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements priceFeeds as libraries\"}},\"title\":\"A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cheaperWithdraw()\":{\"notice\":\"instead of always keep reading from storage, what we gonna do is read the entire array into memore, 1 time. And then read from memory instead from constantly read from storage.\"},\"fund()\":{\"notice\":\"This function funds this contract\"},\"getOwner()\":{\"notice\":\"We will make some getter functions in order to make easier to anyone that interacts with our API to read the variables because calling 'i_' ir 's_' is a bit strange for using the variables\"}},\"notice\":\"This contract is to demo a simple funding contract\\\"s_\\\" means that it's a storage variable, which consumes a lot of gas.\\\"i_\\\" is a good practice for immutable variablesfor constant variables, we use CAPSLOCK\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum value in USD\\n\\n// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.0;\\n\\n// Imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 1\\u00ba 820, 652; 2\\u00ba 799, 610; gas to deploy\\n// Constant and Immutable keyword helps to bring gas down\\n\\n// Errors Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, contracts\\n\\n/**\\n * @title A contract for crowdfunding\\n * @author Mateus Akira\\n * @notice This contract is to demo a simple funding contract\\n * @notice \\\"s_\\\" means that it's a storage variable, which consumes\\n * a lot of gas.\\n * @notice \\\"i_\\\" is a good practice for immutable variables\\n * @notice for constant variables, we use CAPSLOCK\\n * @dev This implements priceFeeds as libraries\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State variables\\n    //constant variables have different variable names\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    // constant - 351 * 13000000000 = 4.563.000.000.000 = 0,00844155 usd\\n    // non-constant 2451 * 13000000000 = 34314000000000 = 0,06 usd\\n\\n    address[] private s_funders;\\n    // we map the addresses to know how much each address has send to the contract;\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n\\n    // to make only the contract owner able to call the withdrwa function, we need to create teh following:\\n    // variables that are set 1 time but outside of the line where they're declared\\n    // we can mark as immutable\\n    address private immutable i_owner; // instead of calling owner, a good convention is using 'i_'\\n\\n    // 444 gas immutable\\n    // 2,500 gas non-immutable\\n    AggregatorV3Interface public s_priceFeed;\\n    modifier onlyOwner() {\\n        // With custom error, it makes gas efficient:\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } // the revert keyword make the same as 'require()' but without the conditional beforehand\\n        _;\\n\\n        // Another way to do, but without custom error:\\n\\n        // // To make only the contract owner to be able to withdraw:\\n        // require(msg.sender == i_owner, \\\"Sender is not the owner!\\\");\\n        // _; // the underscore represents doing the rest of the code.\\n        // //if the underscore comes above the require, it would mean to do the code and after went through the entire code\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        //whoever who deploys the contract\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /*receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }*/\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements priceFeeds as libraries\\n     */\\n    // Limit tinkering / triaging to 20 minutes to 20 min\\n    // Take at least 15min or be 100% sure\\n    function fund() public payable {\\n        // Want to be able to set a minimum fund amount\\n        // 1. How do we send ETH to this contract?\\n        // to get  how much someone is sending:\\n        //msg.value;\\n        // or if a specific amount is required:\\n        // require(msg.value >= 1e18, \\\"Didn't send enough\\\");// ETH must be representend in WEI, so 1 ETH == 1e18 == 1 * ((10)**18)\\n        // msg.value is the first parameter to be considered by a library\\n        // so when using a library, insted of using getConversionRate(msg.value) we use msg.value.getConversionRate();\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH\\\"\\n        );\\n        s_funders.push(msg.sender); // -> sender is the address of however calls the function\\n        //here we can see\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // When we withdraw the funds we also want to reset the s_funders array\\n        // for(starting index, ending index, step amount)\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            //code\\n            address funder = s_funders[funderIndex];\\n            // Here we reset the counter of the amount funded by the funder\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // we need to reset the s_funders array\\n        // instead of looping through the array and deleting objects, we can just do:\\n        s_funders = new address[](0); // that means we will start a new array with 0 elements inside of it.\\n        // we need to actually withdraw the funds\\n\\n        // There are 3 different ways to send ETH from a contract to somewhere else\\n\\n        /*// transfer:\\n        // msg.sender = is of type address\\n        // payable(msg.sender) = in of type payable address\\n        // https://solidity-by-example.org/sending-ether/\\n        // in solidity in order to send the native token, like ETH, you can only work with payable addresses \\n        // transfer (2300 gas, throws error)\\n        payable(msg.sender).transfer(address(this).balance); // this keyword refers to all this contract\\n        // but there are some issues with 'transfer'\\n        \\n        // send (2300 gas, returns bool)\\n        // payable(msg.sender).send(address(this).balance) //but we don't want to finish the call here, so:\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\"); //if it fails, still, using the require the trx will revert in case of error*/\\n\\n        // RECOMMENDED - call (forward all gas or set gas, returns bool)(using low-level code commands)\\n        (bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    /**\\n     * @notice instead of always keep reading from storage, what\\n     * we gonna do is read the entire array into memore, 1 time.\\n     * And then read from memory instead from constantly read from\\n     * storage.\\n     */\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mapping can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            // reseting the funders mapping\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // What happens if someone send this contract ETH without calling the fund function\\n\\n    // View/pure\\n    /**\\n     * @notice We will make some getter functions in order to make\\n     * easier to anyone that interacts with our API to read the variables\\n     * because calling 'i_' ir 's_' is a bit strange for using the variables\\n     */\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x0b7a697a3a11a59098da8d7dab0674765624a0254f6895f753fe84dcc87a30be\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Commit from 0.8.0 version:\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// All the functions in a library are internal\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH / USD rate in 18 digit\\n        return uint256(price * 1e10); // 1* 10**10 = 10000000000\\n    }\\n\\n    /*function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n        return priceFeed.version();\\n    }*/\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // always multiply before dividing\\n        // 3000_000000000000000000 = ETH/USD price\\n        // 1_000000000000000000 ETH\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // if we don't divide, it will return 3 * 1e36\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb02f55d2f891f1cfee20e3f6f3a16eb55baef61a57c0be96cad554003a806819\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200138e3803806200138e833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61120862000186600039600081816102ad015281816104fc01528181610687015261087d01526112086000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd578063d7b4750c146101e757610091565b80630343fb25146100965780630ec3b027146100d35780631bf6132d146100fe5780633ccfd60b1461013b5780636b69a59214610152575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b40565b610224565b6040516100ca9190610b86565b60405180910390f35b3480156100df57600080fd5b506100e861026d565b6040516100f59190610c00565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610b40565b610293565b6040516101329190610b86565b60405180910390f35b34801561014757600080fd5b506101506102ab565b005b34801561015e57600080fd5b506101676104eb565b6040516101749190610b86565b60405180910390f35b34801561018957600080fd5b506101926104f8565b60405161019f9190610c2a565b60405180910390f35b3480156101b457600080fd5b506101bd610520565b6040516101ca9190610c00565b60405180910390f35b6101db61054a565b005b6101e5610685565b005b3480156101f357600080fd5b5061020e60048036038101906102099190610c71565b610913565b60405161021b9190610c2a565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610330576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103db57600080828154811061035557610354610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103d390610cfc565b915050610333565b50600067ffffffffffffffff8111156103f7576103f6610d45565b5b6040519080825280602002602001820160405280156104255781602001602082028036833780820191505090505b506000908051906020019061043b929190610a36565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161046290610da5565b60006040518083038185875af1925050503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b50509050806104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90610e17565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610589600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095a90919063ffffffff16565b10156105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190610e83565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461067c9190610ea3565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561078d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610743575b5050505050905060005b81518110156108185760008282815181106107b5576107b4610c9e565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061081090610cfc565b915050610797565b50600067ffffffffffffffff81111561083457610833610d45565b5b6040519080825280602002602001820160405280156108625781602001602082028036833780820191505090505b5060009080519060200190610878929190610a36565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bf90610da5565b60006040518083038185875af1925050503d80600081146108fc576040519150601f19603f3d011682016040523d82523d6000602084013e610901565b606091505b505090508061090f57600080fd5b5050565b600080828154811061092857610927610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096683610996565b90506000670de0b6b3a7640000858361097f9190610ef9565b6109899190610f82565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190611040565b5050509150506402540be40081610a2e91906110bb565b915050919050565b828054828255906000526020600020908101928215610aaf579160200282015b82811115610aae5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a56565b5b509050610abc9190610ac0565b5090565b5b80821115610ad9576000816000905550600101610ac1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0d82610ae2565b9050919050565b610b1d81610b02565b8114610b2857600080fd5b50565b600081359050610b3a81610b14565b92915050565b600060208284031215610b5657610b55610add565b5b6000610b6484828501610b2b565b91505092915050565b6000819050919050565b610b8081610b6d565b82525050565b6000602082019050610b9b6000830184610b77565b92915050565b6000819050919050565b6000610bc6610bc1610bbc84610ae2565b610ba1565b610ae2565b9050919050565b6000610bd882610bab565b9050919050565b6000610bea82610bcd565b9050919050565b610bfa81610bdf565b82525050565b6000602082019050610c156000830184610bf1565b92915050565b610c2481610b02565b82525050565b6000602082019050610c3f6000830184610c1b565b92915050565b610c4e81610b6d565b8114610c5957600080fd5b50565b600081359050610c6b81610c45565b92915050565b600060208284031215610c8757610c86610add565b5b6000610c9584828501610c5c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0782610b6d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3a57610d39610ccd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8f600083610d74565b9150610d9a82610d7f565b600082019050919050565b6000610db082610d82565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e01600b83610dba565b9150610e0c82610dcb565b602082019050919050565b60006020820190508181036000830152610e3081610df4565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610e6d601a83610dba565b9150610e7882610e37565b602082019050919050565b60006020820190508181036000830152610e9c81610e60565b9050919050565b6000610eae82610b6d565b9150610eb983610b6d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eee57610eed610ccd565b5b828201905092915050565b6000610f0482610b6d565b9150610f0f83610b6d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4857610f47610ccd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8d82610b6d565b9150610f9883610b6d565b925082610fa857610fa7610f53565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fd281610fb3565b8114610fdd57600080fd5b50565b600081519050610fef81610fc9565b92915050565b6000819050919050565b61100881610ff5565b811461101357600080fd5b50565b60008151905061102581610fff565b92915050565b60008151905061103a81610c45565b92915050565b600080600080600060a0868803121561105c5761105b610add565b5b600061106a88828901610fe0565b955050602061107b88828901611016565b945050604061108c8882890161102b565b935050606061109d8882890161102b565b92505060806110ae88828901610fe0565b9150509295509295909350565b60006110c682610ff5565b91506110d183610ff5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111105761110f610ccd565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561114d5761114c610ccd565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561118a57611189610ccd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111c7576111c6610ccd565b5b82820290509291505056fea26469706673582212209077ad7b333aa084fa2918df82d51ad095a1aa9ac5bd96f3d60472a032fd802d64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd578063d7b4750c146101e757610091565b80630343fb25146100965780630ec3b027146100d35780631bf6132d146100fe5780633ccfd60b1461013b5780636b69a59214610152575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610b40565b610224565b6040516100ca9190610b86565b60405180910390f35b3480156100df57600080fd5b506100e861026d565b6040516100f59190610c00565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610b40565b610293565b6040516101329190610b86565b60405180910390f35b34801561014757600080fd5b506101506102ab565b005b34801561015e57600080fd5b506101676104eb565b6040516101749190610b86565b60405180910390f35b34801561018957600080fd5b506101926104f8565b60405161019f9190610c2a565b60405180910390f35b3480156101b457600080fd5b506101bd610520565b6040516101ca9190610c00565b60405180910390f35b6101db61054a565b005b6101e5610685565b005b3480156101f357600080fd5b5061020e60048036038101906102099190610c71565b610913565b60405161021b9190610c2a565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610330576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103db57600080828154811061035557610354610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103d390610cfc565b915050610333565b50600067ffffffffffffffff8111156103f7576103f6610d45565b5b6040519080825280602002602001820160405280156104255781602001602082028036833780820191505090505b506000908051906020019061043b929190610a36565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161046290610da5565b60006040518083038185875af1925050503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b50509050806104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90610e17565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610589600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095a90919063ffffffff16565b10156105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190610e83565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461067c9190610ea3565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561078d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610743575b5050505050905060005b81518110156108185760008282815181106107b5576107b4610c9e565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061081090610cfc565b915050610797565b50600067ffffffffffffffff81111561083457610833610d45565b5b6040519080825280602002602001820160405280156108625781602001602082028036833780820191505090505b5060009080519060200190610878929190610a36565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bf90610da5565b60006040518083038185875af1925050503d80600081146108fc576040519150601f19603f3d011682016040523d82523d6000602084013e610901565b606091505b505090508061090f57600080fd5b5050565b600080828154811061092857610927610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096683610996565b90506000670de0b6b3a7640000858361097f9190610ef9565b6109899190610f82565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190611040565b5050509150506402540be40081610a2e91906110bb565b915050919050565b828054828255906000526020600020908101928215610aaf579160200282015b82811115610aae5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a56565b5b509050610abc9190610ac0565b5090565b5b80821115610ad9576000816000905550600101610ac1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0d82610ae2565b9050919050565b610b1d81610b02565b8114610b2857600080fd5b50565b600081359050610b3a81610b14565b92915050565b600060208284031215610b5657610b55610add565b5b6000610b6484828501610b2b565b91505092915050565b6000819050919050565b610b8081610b6d565b82525050565b6000602082019050610b9b6000830184610b77565b92915050565b6000819050919050565b6000610bc6610bc1610bbc84610ae2565b610ba1565b610ae2565b9050919050565b6000610bd882610bab565b9050919050565b6000610bea82610bcd565b9050919050565b610bfa81610bdf565b82525050565b6000602082019050610c156000830184610bf1565b92915050565b610c2481610b02565b82525050565b6000602082019050610c3f6000830184610c1b565b92915050565b610c4e81610b6d565b8114610c5957600080fd5b50565b600081359050610c6b81610c45565b92915050565b600060208284031215610c8757610c86610add565b5b6000610c9584828501610c5c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0782610b6d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3a57610d39610ccd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8f600083610d74565b9150610d9a82610d7f565b600082019050919050565b6000610db082610d82565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e01600b83610dba565b9150610e0c82610dcb565b602082019050919050565b60006020820190508181036000830152610e3081610df4565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610e6d601a83610dba565b9150610e7882610e37565b602082019050919050565b60006020820190508181036000830152610e9c81610e60565b9050919050565b6000610eae82610b6d565b9150610eb983610b6d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eee57610eed610ccd565b5b828201905092915050565b6000610f0482610b6d565b9150610f0f83610b6d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4857610f47610ccd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8d82610b6d565b9150610f9883610b6d565b925082610fa857610fa7610f53565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fd281610fb3565b8114610fdd57600080fd5b50565b600081519050610fef81610fc9565b92915050565b6000819050919050565b61100881610ff5565b811461101357600080fd5b50565b60008151905061102581610fff565b92915050565b60008151905061103a81610c45565b92915050565b600080600080600060a0868803121561105c5761105b610add565b5b600061106a88828901610fe0565b955050602061107b88828901611016565b945050604061108c8882890161102b565b935050606061109d8882890161102b565b92505060806110ae88828901610fe0565b9150509295509295909350565b60006110c682610ff5565b91506110d183610ff5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111105761110f610ccd565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561114d5761114c610ccd565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561118a57611189610ccd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111c7576111c6610ccd565b5b82820290509291505056fea26469706673582212209077ad7b333aa084fa2918df82d51ad095a1aa9ac5bd96f3d60472a032fd802d64736f6c63430008080033",
  "devdoc": {
    "author": "Mateus Akira",
    "details": "This implements priceFeeds as libraries",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements priceFeeds as libraries"
      }
    },
    "title": "A contract for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cheaperWithdraw()": {
        "notice": "instead of always keep reading from storage, what we gonna do is read the entire array into memore, 1 time. And then read from memory instead from constantly read from storage."
      },
      "fund()": {
        "notice": "This function funds this contract"
      },
      "getOwner()": {
        "notice": "We will make some getter functions in order to make easier to anyone that interacts with our API to read the variables because calling 'i_' ir 's_' is a bit strange for using the variables"
      }
    },
    "notice": "This contract is to demo a simple funding contract\"s_\" means that it's a storage variable, which consumes a lot of gas.\"i_\" is a good practice for immutable variablesfor constant variables, we use CAPSLOCK",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
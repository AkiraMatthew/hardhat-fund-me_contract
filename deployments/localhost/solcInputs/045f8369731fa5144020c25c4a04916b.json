{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\n// 1ยบ 820, 652; 2ยบ 799, 610; gas to deploy\n// Constant and Immutable keyword helps to bring gas down\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    //constant variables have different variable names\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    // constant - 351 * 13000000000 = 4.563.000.000.000 = 0,00844155 usd\n    // non-constant 2451 * 13000000000 = 34314000000000 = 0,06 usd\n\n    address[] public funders;\n    // we map the addresses to know how much each address has send to the contract;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    // to make only the contract owner able to call the withdrwa function, we need to create teh following:\n    // variables that are set 1 time but outside of the line where they're declared\n    // we can mark as immutable\n    address public immutable i_owner; // instead of calling owner, a good convention is using 'i_'\n\n    // 444 gas immutable\n    // 2,500 gas non-immutable\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        //whoever who deploys the contract\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // Limit tinkering / triaging to 20 minutes to 20 min\n    // Take at least 15min or be 100% sure\n    function fund() public payable {\n        // Want to be able to set a minimum fund amount\n        // 1. How do we send ETH to this contract?\n        // to get  how much someone is sending:\n        //msg.value;\n        // or if a specific amount is required:\n        // require(msg.value >= 1e18, \"Didn't send enough\");// ETH must be representend in WEI, so 1 ETH == 1e18 == 1 * ((10)**18)\n        // msg.value is the first parameter to be considered by a library\n        // so when using a library, insted of using getConversionRate(msg.value) we use msg.value.getConversionRate();\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH\"\n        );\n        funders.push(msg.sender); // -> sender is the address of however calls the function\n        //here we can see\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // When we withdraw the funds we also want to reset the funders array\n        // for(starting index, ending index, step amount)\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            //code\n            address funder = funders[funderIndex];\n            // Here we reset the counter of the amount funded by the funder\n            addressToAmountFunded[funder] = 0;\n        }\n        // we need to reset the funders array\n        // instead of looping through the array and deleting objects, we can just do:\n        funders = new address[](0); // that means we will start a new array with 0 elements inside of it.\n        // we need to actually withdraw the funds\n\n        // There are 3 different ways to send ETH from a contract to somewhere else\n\n        /*// transfer:\n        // msg.sender = is of type address\n        // payable(msg.sender) = in of type payable address\n        // https://solidity-by-example.org/sending-ether/\n        // in solidity in order to send the native token, like ETH, you can only work with payable addresses \n        // transfer (2300 gas, throws error)\n        payable(msg.sender).transfer(address(this).balance); // this keyword refers to all this contract\n        // but there are some issues with 'transfer'\n        \n        // send (2300 gas, returns bool)\n        // payable(msg.sender).send(address(this).balance) //but we don't want to finish the call here, so:\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require(sendSuccess, \"Send failed\"); //if it fails, still, using the require the trx will revert in case of error*/\n\n        // RECOMMENDED - call (forward all gas or set gas, returns bool)(using low-level code commands)\n        (bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\n            .call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        // With custom error, it makes gas efficient:\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        } // the revert keyword make the same as 'require()' but without the conditional beforehand\n        _;\n\n        // Another way to do, but without custom error:\n\n        // // To make only the contract owner to be able to withdraw:\n        // require(msg.sender == i_owner, \"Sender is not the owner!\");\n        // _; // the underscore represents doing the rest of the code.\n        // //if the underscore comes above the require, it would mean to do the code and after went through the entire code\n    }\n\n    // What happens if someone send this contract ETH without calling the fund function\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Commit from 0.8.0 version:\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// All the functions in a library are internal\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH / USD rate in 18 digit\n        return uint256(price * 1e10); // 1* 10**10 = 10000000000\n    }\n\n    /*function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\n        );\n        return priceFeed.version();\n    }*/\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // always multiply before dividing\n        // 3000_000000000000000000 = ETH/USD price\n        // 1_000000000000000000 ETH\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // if we don't divide, it will return 3 * 1e36\n\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
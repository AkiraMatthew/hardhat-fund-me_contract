/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FundMe, FundMeInterface } from "../FundMe";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c610d8461006d6000396000818161027401526104d90152610d846000f3fe6080604052600436106100595760003560e01c80633ccfd60b146100725780633e47d6f3146100895780636b69a592146100c6578063b60d4288146100f1578063dba6335f146100fb578063dc0d3dff1461012657610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b50610087610272565b005b34801561009557600080fd5b506100b060048036038101906100ab9190610736565b6104b2565b6040516100bd919061077c565b60405180910390f35b3480156100d257600080fd5b506100db6104ca565b6040516100e8919061077c565b60405180910390f35b6100f9610163565b005b34801561010757600080fd5b506101106104d7565b60405161011d91906107a6565b60405180910390f35b34801561013257600080fd5b5061014d600480360381019061014891906107ed565b6104fb565b60405161015a91906107a6565b60405180910390f35b6802b5e3af16b18800006101763461053a565b10156101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae90610877565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026991906108c6565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f7576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103a257600080828154811061031c5761031b61091c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061039a9061094b565b9150506102fa565b50600067ffffffffffffffff8111156103be576103bd610994565b5b6040519080825280602002602001820160405280156103ec5781602001602082028036833780820191505090505b506000908051906020019061040292919061062c565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610429906109f4565b60006040518083038185875af1925050503d8060008114610466576040519150601f19603f3d011682016040523d82523d6000602084013e61046b565b606091505b50509050806104af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a690610a55565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061050b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610545610574565b90506000670de0b6b3a7640000848361055e9190610a75565b6105689190610afe565b90508092505050919050565b60008073694aa1769357215de4fac081bf1f309adc325306905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190610bbc565b5050509150506402540be400816106259190610c37565b9250505090565b8280548282559060005260206000209081019282156106a5579160200282015b828111156106a45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061064c565b5b5090506106b291906106b6565b5090565b5b808211156106cf5760008160009055506001016106b7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610703826106d8565b9050919050565b610713816106f8565b811461071e57600080fd5b50565b6000813590506107308161070a565b92915050565b60006020828403121561074c5761074b6106d3565b5b600061075a84828501610721565b91505092915050565b6000819050919050565b61077681610763565b82525050565b6000602082019050610791600083018461076d565b92915050565b6107a0816106f8565b82525050565b60006020820190506107bb6000830184610797565b92915050565b6107ca81610763565b81146107d557600080fd5b50565b6000813590506107e7816107c1565b92915050565b600060208284031215610803576108026106d3565b5b6000610811848285016107d8565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061086160128361081a565b915061086c8261082b565b602082019050919050565b6000602082019050818103600083015261089081610854565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108d182610763565b91506108dc83610763565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561091157610910610897565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061095682610763565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561098957610988610897565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109de6000836109c3565b91506109e9826109ce565b600082019050919050565b60006109ff826109d1565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a3f600b8361081a565b9150610a4a82610a09565b602082019050919050565b60006020820190508181036000830152610a6e81610a32565b9050919050565b6000610a8082610763565b9150610a8b83610763565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ac457610ac3610897565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b0982610763565b9150610b1483610763565b925082610b2457610b23610acf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b4e81610b2f565b8114610b5957600080fd5b50565b600081519050610b6b81610b45565b92915050565b6000819050919050565b610b8481610b71565b8114610b8f57600080fd5b50565b600081519050610ba181610b7b565b92915050565b600081519050610bb6816107c1565b92915050565b600080600080600060a08688031215610bd857610bd76106d3565b5b6000610be688828901610b5c565b9550506020610bf788828901610b92565b9450506040610c0888828901610ba7565b9350506060610c1988828901610ba7565b9250506080610c2a88828901610b5c565b9150509295509295909350565b6000610c4282610b71565b9150610c4d83610b71565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610c8c57610c8b610897565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cc957610cc8610897565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d0657610d05610897565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d4357610d42610897565b5b82820290509291505056fea26469706673582212204920ba0c47a3a44bf904433f5ddee956547ab09cf91c41eb10eb5981db15ae9d64736f6c63430008080033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FundMe";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundMe> {
    return super.deploy(overrides || {}) as Promise<FundMe>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }
  static readonly contractName: "FundMe";
  public readonly contractName: "FundMe";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
